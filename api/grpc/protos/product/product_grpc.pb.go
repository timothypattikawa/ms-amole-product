// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductStock_TakeStockForATC_FullMethodName = "/ProductStock/TakeStockForATC"
	ProductStock_ProductInfo_FullMethodName     = "/ProductStock/ProductInfo"
)

// ProductStockClient is the client API for ProductStock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductStockClient interface {
	TakeStockForATC(ctx context.Context, in *TakeStockForATCkRequest, opts ...grpc.CallOption) (*TakeStockForATCResponse, error)
	ProductInfo(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type productStockClient struct {
	cc grpc.ClientConnInterface
}

func NewProductStockClient(cc grpc.ClientConnInterface) ProductStockClient {
	return &productStockClient{cc}
}

func (c *productStockClient) TakeStockForATC(ctx context.Context, in *TakeStockForATCkRequest, opts ...grpc.CallOption) (*TakeStockForATCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TakeStockForATCResponse)
	err := c.cc.Invoke(ctx, ProductStock_TakeStockForATC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productStockClient) ProductInfo(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ProductStock_ProductInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductStockServer is the server API for ProductStock service.
// All implementations must embed UnimplementedProductStockServer
// for forward compatibility.
type ProductStockServer interface {
	TakeStockForATC(context.Context, *TakeStockForATCkRequest) (*TakeStockForATCResponse, error)
	ProductInfo(context.Context, *ProductRequest) (*ProductResponse, error)
	mustEmbedUnimplementedProductStockServer()
}

// UnimplementedProductStockServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductStockServer struct{}

func (UnimplementedProductStockServer) TakeStockForATC(context.Context, *TakeStockForATCkRequest) (*TakeStockForATCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeStockForATC not implemented")
}
func (UnimplementedProductStockServer) ProductInfo(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfo not implemented")
}
func (UnimplementedProductStockServer) mustEmbedUnimplementedProductStockServer() {}
func (UnimplementedProductStockServer) testEmbeddedByValue()                      {}

// UnsafeProductStockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductStockServer will
// result in compilation errors.
type UnsafeProductStockServer interface {
	mustEmbedUnimplementedProductStockServer()
}

func RegisterProductStockServer(s grpc.ServiceRegistrar, srv ProductStockServer) {
	// If the following call pancis, it indicates UnimplementedProductStockServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductStock_ServiceDesc, srv)
}

func _ProductStock_TakeStockForATC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeStockForATCkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStockServer).TakeStockForATC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStock_TakeStockForATC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStockServer).TakeStockForATC(ctx, req.(*TakeStockForATCkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductStock_ProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductStockServer).ProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductStock_ProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductStockServer).ProductInfo(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductStock_ServiceDesc is the grpc.ServiceDesc for ProductStock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductStock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductStock",
	HandlerType: (*ProductStockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TakeStockForATC",
			Handler:    _ProductStock_TakeStockForATC_Handler,
		},
		{
			MethodName: "ProductInfo",
			Handler:    _ProductStock_ProductInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
